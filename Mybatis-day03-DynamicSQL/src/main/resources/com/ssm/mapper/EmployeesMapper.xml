<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.mapper.EmployeesMapper">

<cache eviction="FIFO" flushInterval="600000" readOnly="true"></cache>
	<!-- 
	
		eviction=“FIFO”：缓存回收策略：
			• LRU – 最近最少使用的：移除最长时间不被使用的对象。
			• FIFO – 先进先出：按对象进入缓存的顺序来移除它们。
			• SOFT – 软引用：移除基于垃圾回收器状态和软引用规则的对象。
			• WEAK – 弱引用：更积极地移除基于垃圾收集器状态和弱引用规则的对象。
			• 默认的是 LRU。 
			
		• flushInterval：刷新间隔，单位毫秒
			• 默认情况是不设置，也就是没有刷新间隔，缓存仅仅调用语句时刷新
			
		• size：引用数目，正整数
			• 代表缓存最多可以存储多少个对象，太大容易导致内存溢出
			
		• readOnly：只读，true/false
		
			• true：只读缓存；会给所有调用者返回缓存对象的相同实例。因此这些对象
				不能被修改。这提供了很重要的性能优势。
			• false：读写缓存；会返回缓存对象的拷贝（通过序列化）。这会慢一些，
				但是安全，因此默认是 false。
			
		• type: 指定自定义缓存的全类名
				实现Cache接口即可
	
	 -->
	
	
	
	<!-- if choose (when,otherwise) trim(where set) foreach -->

	<select id="getEmployeesByConditionIf" resultType="com.ssm.domain.Employees">
		select * from tb_employees where 1 = 1

		<if test="lastName!=null &amp;&amp; lastName!=''">
			and last_name = #{lastName}
		</if>

		<if test="email!=null &amp;&amp; email!=''">
			and email = #{email}
		</if>

		<if test="gender==0 or gender==1">
			and gender = #{gender}
		</if>

	</select>

	<select id="getEmployeesByConditionIf1" resultType="com.ssm.domain.Employees">
		select * from tb_employees
		<where>
			<if test="lastName!=null &amp;&amp; lastName!=''">
				and last_name = #{lastName}
			</if>

			<if test="email!=null &amp;&amp; email!=''">
				and email = #{email}
			</if>

			<if test="gender==0 or gender==1">
				and gender = #{gender}
			</if>
		</where>
	</select>

	<select id="getEmployeesByConditionIf2" resultType="com.ssm.domain.Employees">
		select * from tb_employees
		<trim prefix="where" prefixOverrides="and">
			<if test="lastName!=null &amp;&amp; lastName!=''">
				and last_name = #{lastName}
			</if>

			<if test="email!=null &amp;&amp; email!=''">
				and email = #{email}
			</if>

			<if test="gender==0 or gender==1">
				and gender = #{gender}
			</if>
		</trim>
	</select>




	<select id="getEmployeesByConditionChoose" resultType="com.ssm.domain.Employees">
		select * from tb_employees
		<where>
			<choose>
				<when test="lastName!=null &amp;&amp; lastName!=''">
					and last_name = #{lastName}
				</when>
				<when test="email!=null &amp;&amp; email!=''">
					and email = #{email}
				</when>

				<otherwise>
					and gender = #{gender}
				</otherwise>
			</choose>
		</where>
	</select>



	<update id="updateEmployeesByConditionSet">
		update tb_employees
		set
		<if test="lastName!=null &amp;&amp; lastName!=''">
			last_name = #{lastName},
		</if>

		<if test="email!=null &amp;&amp; email!=''">
			email = #{email},
		</if>

		<if test="gender==0 or gender==1">
			gender = #{gender}
		</if>
		where id = #{id}

	</update>

	<update id="updateEmployeesByConditionSet1">
		update tb_employees
		<set>
			<if test="lastName!=null &amp;&amp; lastName!=''">
				last_name = #{lastName},
			</if>

			<if test="email!=null &amp;&amp; email!=''">
				email = #{email},
			</if>

			<if test="gender.trim()!='' and gender.trim()!=null">
				gender = #{gender}
			</if>
			where id = #{id}
		</set>
	</update>

	<update id="updateEmployeesByConditionSet2">
		update tb_employees
		<trim prefix="set" suffixOverrides=",">
			<if test="lastName!=null &amp;&amp; lastName!=''">
				last_name = #{lastName},
			</if>

			<if test="email!=null &amp;&amp; email!=''">
				email = #{email},
			</if>

			<if test="gender.trim()!='' and gender.trim()!=null">
				gender = #{gender}
			</if>
		</trim>
		where id = #{id}
	</update>

	<select id="getEmployeesByConditionList" resultType="com.ssm.domain.Employees">
		select * from tb_employees where id in
		
		<foreach collection="list" item="id" separator="," open="(" close=")">
			#{id}
		</foreach>
	</select>

<insert id="addEmployeesList">
	insert into tb_employees(last_name,email,gender) values
	
		<foreach collection="list" item="item" separator="," >
			(#{item.lastName},#{item.email},#{item.gender})
		</foreach>
</insert>

<insert id="addEmployeesList1">
	insert into tb_employees(last_name,email,gender) values
	
		<foreach collection="employeesList" item="item" separator="," >
			(#{item.lastName},#{item.email},#{item.gender})
		</foreach>
</insert>


<insert id="addEmployeesList" databaseId="oracle">
		<foreach collection="employeesList" item="item" separator=";" open="begin" close="end;" >
			insert into tb_employees(id,last_name,email,gender) values (EMPLOYEES_SEQ.nextVal,#{item.lastName},#{item.email},#{item.gender})
		</foreach>
</insert>

<insert id="addEmployeesList1" databaseId="oracle">
		<foreach collection="list" item="item" separator=";" open="begin" close="end;" >
			insert into tb_employees(id,last_name,email,gender) values (EMPLOYEES_SEQ.nextVal,#{item.lastName},#{item.email},#{item.gender})
		</foreach>
</insert>

<insert id="addEmployeesList2" databaseId="oracle">
	insert into employees(employees_id,lastName,email) 
		
		<foreach collection="employeesList" item="item"  separator="union" open="select employees_seq.nextval,lastName,email from(" close=")">
			select #{item.lastName}  lastName, #{item.email} email from dual
		</foreach>
		
</insert>

<insert id="addEmployeesList3" databaseId="oracle">
	insert into employees(employees_id,lastName,email) 
		
		<foreach collection="list" item="item"  separator="union" open="select employees_seq.nextval,lastName,email from(" close=")">
			select #{item.lastName}  lastName, #{item.email} email from dual
		</foreach>
</insert>

</mapper>