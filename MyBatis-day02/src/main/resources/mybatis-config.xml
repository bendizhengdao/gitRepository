<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
 PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
<!-- <properties></properties>引入外部文件
		resource:引入类路径下的资源
		url:引入网络路径或磁盘路径下的资源
 -->
	<properties resource="db.properties"></properties>
	
	<settings>
		<!--
			mapUnderscoreToCamelCase：开启驼峰命名匹配规则
			lazyLoadingEnabled/aggressiveLazyLoading:开启懒加载
			cacheEnabled:开启二级缓存
			
		
		  -->
		<setting name="mapUnderscoreToCamelCase" value="true"/>
		
				<setting name="lazyLoadingEnabled" value="true" />
				<setting name="aggressiveLazyLoading" value="false"/>
	
	</settings>
	<!--   批量起别名的情况下,使用 @Alias注解为某个类型指定新的别名     -->
	<typeAliases>
		 <package name="com.ssm.domain"/>
	</typeAliases>
	
	<typeHandlers>
		<!-- 
			将JAVA类型和数据库类型进行映射匹配
		 -->
		 <typeHandler handler="org.apache.ibatis.type.LocalDateTypeHandler"/>
	</typeHandlers>
	<!-- 
		environments:
			environment:配置一个具体的环境信息:
				transactionManager
					type: JDBC(JdbcTransactionFactory)/MANAGED(ManagedTransactionFactory) Configuration.class
					自定义事务管理器: implements TransactionFactory, type为全类名
				dataSource
					type数据源类型:UNPOOLED(UnpooledDataSourceFactory)|POOLED(PooledDataSourceFactory)|JNDI(JndiDataSourceFactory)
	 				自定义数据源: implements DataSourceFactory,type为全类名
	 -->
	 
	 <plugins>
	 
	 </plugins>
	<environments default="development">  <!-- default 指定当前所有的环境 -->
		<environment id="development">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>
		
		<environment id="test">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>
		
	</environments>
	<!-- 
		<databaseIdProvider></databaseIdProvider>支持多数据库厂商
		作用就是获取数据库厂商的标识
			配置Sql映射文件才有效果
				<select id="getEmpByDeptId" resultType="emp" databaseId="mysql">
					select * from tb_employees where d_id = #{id}
				</select>
	 -->
	<databaseIdProvider type="DB_VENDOR">
		  <!-- 为不同的数据库厂商起别名 -->
		  <property name="SQL Server" value="sqlserver"/>
		  <property name="DB2" value="db2"/>
		  <property name="Oracle" value="oracle" />
		  <property name="MySQL" value="mysql" />
	</databaseIdProvider>

	
	<mappers>
		<!-- 
			<mapper resource="mybatis/mapper/EmployeeMapper.xml">
			<mapper url="file:///var/mapper/EmployeeMapper.xml">
			<mapper class="com.ssm.mapper.EmployeeMapper">
			
				resource:引用类路径下的sql映射文件
				url:引用网路路径或者磁盘路径下的sql映射文件
				class:引用(注册)接口(要求Sql映射文件名必须和接口名相同且在同一目录下)
		 -->
		<!-- 要求Sql映射文件名必须和接口名相同且在同一目录下 -->
		 <package name="com.ssm.mapper"/>
	</mappers>
	
	
</configuration>