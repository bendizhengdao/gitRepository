update / delete / insert 默认返回 int

单个参数,mybatis不会做特殊处理:
	#{参数名},取出参数值
	
	
多个参数:

	接口中:   
		public List<Employees> selectEmployeesByNameAndEmail1(@Param("lastName")String last_Name,@Param("email")String email);
		
			#{lastName},取出参数值
			#{email},取出参数值
			<select id="selectEmployeesByNameAndEmail" resultType="employees" databaseId="mysql" >
			 	select * from tb_employees where last_name = #{lastName} and email = #{email}
			</select>
	
	多个参数 :
		public List<Employees> selectEmployeesByNameAndEmail(String last_Name,String email);
		
		key: param1,param2,... paramN,或者参数 0，1
		value：值
		
		<select id="selectEmployeesByNameAndEmail" resultType="employees" databaseId="mysql" >
		 	select * from tb_employees where last_name = #{param1} and email = #{param2}
		</select>
		
	传入map:  public List<Employees> selectEmployeesByMap(Map map);
			#{map中的key},取出参数值
			
			Map<String, Object> map = new HashMap<>();
			map.put("ids", 2);
			map.put("lastName", "Tom");
		
			
			
			<select id="selectEmployeesByidAndlastName" resultType="employees" databaseId="mysql" >
			 	select * from tb_employees where id = #{ids} and email = #{lastName}
			</select>
	
	
	public Employees getEmp(@Param("id")Integer id,String lastName);
		取值:
			id ===>#{id/param1}
			last ====>#{param2}	
			
			<select id="selectEmployeesByidAndlastName" resultType="employees" databaseId="mysql" >
			 	select * from tb_employees where id = #{param1} and email = #{param2}
			</select>
			
			<select id="selectEmployeesByidAndlastName" resultType="employees" databaseId="mysql" >
			 	select * from tb_employees where id = #{id} and email = #{param2}
			</select>
	
	public Employees getEmp(Integer id,@Param("e")Employees emp);
	
		取值:
			id ===>#{param1}
			last ====>#{param2.lastName/e.lastName}
			
			<select id="selectEmployeesByNameAndEmail" resultType="employees" databaseId="mysql" >
			 	select * from tb_employees where last_name = #{param1} and email = #{param2.email}
			</select>
			
			<select id="selectEmployeesByNameAndEmail" resultType="employees" databaseId="mysql" >
			 	select * from tb_employees where last_name = #{param1} and email = #{e.email}
			</select>
		
	对于Collection(List,Set)类型或者时数组
	
		key:Collection(collection),如果是List还可以使用 这个key (list)
			数组(array)
		
		public Employees getEmpById(List<Integer>ids);
			取值第一个值:#{list[0]}
			

		
源码:
	ParamNameResolver
	
#{}和 ${} 取值
	#{}：以预编译的方式,将参数设置到sql中:PreparedStatement
	${}:取出的值直接拼装在sql中:Statement
	
${}: 可以传入 tableName, columnName

 	select * from ${year}_salary where xxx

	select * from ${year}_salary  order by ${f_name} desc

模糊查询:
	  <select id="selectEmployeesByLikeName" resultType="employees" databaseId="mysql" >
	 		select * from tb_employees where last_name like concat('%',#{lastName},'%') 
	 </select>
	 
#{}:
	JdbcType: 通常需要在某种特定的条件下被设置:  JdbcType.class
	
		在我们数据为null的时候,有些数据可能不能识别 mybatis对null的默认处理.比如Oracle(报错)
		
		JdbcType OTHER:为无效的类型，mybatis对所有的null都映射的是原生Jdbc的OTHER类型。
		
		insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL) values(#{id},#{lastName},#{email,jdbcType=NULL})
		
		返回Map<String,Object>:
			
			public Map selectEmployeesById(Integer Id);
			
			<select id="selectEmployeesById" resultType="map" databaseId="mysql" >
		 		select * from tb_employees where id =#{id} 
		 	</select>
		
		返回Map<Integer,Employees>
		
			@MapKey("id") //mybatis封装的时候，map的key为哪个属性
			public Map<Integer,Employees> selectEmployeesByIdMap(String name);
			
			<select id="selectEmployeesByIdMap" resultType="map" databaseId="mysql" >
		 		select * from tb_employees where last_name like #{name} 
		 	</select>
		 	
内置参数:
	_parameter:代表整个参数
		单个参数:
			_parameter就是这个参数
			
			多个参数:参数会封装为一个map,_parameter 代表这个map
			
	_databaseId:如果配置了 databaseIdProvider标签, _databaseId就代表当前数据库的别名